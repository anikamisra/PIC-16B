[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/hw-0/index.html",
    "href": "posts/hw-0/index.html",
    "title": "HW0",
    "section": "",
    "text": "In today’s dataset from Github, I will be explaining how to create a simple visualization from the Palmer Penguins dataset. There are many features in this dataset, such as species, region, island, egg stage, culmen features, body mass, gender, and delta 15 N features. However, the question we are trying to answer today is:\n\n\nLet’s get started."
  },
  {
    "objectID": "posts/hw-0/index.html#improvements-and-next-steps",
    "href": "posts/hw-0/index.html#improvements-and-next-steps",
    "title": "HW0",
    "section": "Improvements and next steps:",
    "text": "Improvements and next steps:\n\ncreate DataFrames of each island and species to determine the exact range of body masses\nGet more specific statistics and exact numbers as opposed to relying on visualizations\nGet more data from Chinstrap and Gentoo penguins that comes from other islands\n\nI hope you learned something with today’s blog post! Have an ice day.\n\n\n\nHave an ice day.png\n\n\nImage sources: Ice\nPenguin"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in my Quarto blog. Just testing things out. Here is a painting I made two days ago."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This python code is known as one of the most complex pieces of code ever written. If you run this in your IDE, it might blow your mind:\n\nprint(\"hello world\") \n\nhello world"
  },
  {
    "objectID": "posts/hw-1/index.html",
    "href": "posts/hw-1/index.html",
    "title": "Using SQL in Plots",
    "section": "",
    "text": "Welcome!\nToday we will be creating several interactive plots from the NOAA climate dataset. However, because this dataset is extremely large, we will be taking advantage of SQL querying, which allows us to select the data we need without uploading the entire file and using up too much memory.\n\n\nSection 1: Creating the database\nFirst, we will upload all necessary packages.\n\nimport sqlite3\nimport pandas as pd\nimport plotly.io as pio\npio.renderers.default=\"iframe\"\n\nNow let’s enter the relevant file names.\n\ncountries_url = \"https://raw.githubusercontent.com/mysociety/gaze/master/data/fips-10-4-to-iso-country-codes.csv\"\ntemps_url = \"temps.csv\"\nstation_url = \"station-metadata.csv\"\n\n# add link to download other tables \n\nNow we will create a database called my_database.db.\n\nconn = sqlite3.connect(\"database.db\") # this creates a database in current directory called my_database.db\n\nNow we are ready to add our first table to our database. The entire purpose of using SQL querying is that we avoid uploading the entire table in order to prevent overusage of RAM. Because the temperatures dataset is extremely large, for this reason, we will upload it chunk by chunk. And, because the other datasets are smaller, we can just upload them all at once.\nLet’s set the chunksize of the temps dataframe to 100,000. With the chunksize keyword specified, the read_csv function of pandas creates an iterator of the temps dataframe.\n\nCHUNKSIZE=100000\ntemps_df_iter = pd.read_csv(temps_url, chunksize=CHUNKSIZE)\ntemps_df = temps_df_iter.__next__()\ntemps_df.shape\n\n(100000, 14)\n\n\nAs we can see, the temps dataframe indeed has only 100,000 rows! Let’s finish uploading the other files and then preview everything.\n\ncountries_df = pd.read_csv(countries_url)\ncountries_df.shape\n\n(279, 3)\n\n\n\nstations_df = pd.read_csv(station_url) \nstations_df.shape\n\n(27585, 5)\n\n\nAs we can see, the stations and countries files are not nearly as large as the temperatures file. Now, let’s preview what each table looks like so we are familiar with the column names and how to query accordingly.\n\ntemps_df.head()\n\n\n\n\n\n\n\n\nID\nYear\nVALUE1\nVALUE2\nVALUE3\nVALUE4\nVALUE5\nVALUE6\nVALUE7\nVALUE8\nVALUE9\nVALUE10\nVALUE11\nVALUE12\n\n\n\n\n0\nACW00011604\n1961\n-89.0\n236.0\n472.0\n773.0\n1128.0\n1599.0\n1570.0\n1481.0\n1413.0\n1174.0\n510.0\n-39.0\n\n\n1\nACW00011604\n1962\n113.0\n85.0\n-154.0\n635.0\n908.0\n1381.0\n1510.0\n1393.0\n1163.0\n994.0\n323.0\n-126.0\n\n\n2\nACW00011604\n1963\n-713.0\n-553.0\n-99.0\n541.0\n1224.0\n1627.0\n1620.0\n1596.0\n1332.0\n940.0\n566.0\n-108.0\n\n\n3\nACW00011604\n1964\n62.0\n-85.0\n55.0\n738.0\n1219.0\n1442.0\n1506.0\n1557.0\n1221.0\n788.0\n546.0\n112.0\n\n\n4\nACW00011604\n1965\n44.0\n-105.0\n38.0\n590.0\n987.0\n1500.0\n1487.0\n1477.0\n1377.0\n974.0\n31.0\n-178.0\n\n\n\n\n\n\n\n\ncountries_df.head()\n\n\n\n\n\n\n\n\nFIPS 10-4\nISO 3166\nName\n\n\n\n\n0\nAF\nAF\nAfghanistan\n\n\n1\nAX\n-\nAkrotiri\n\n\n2\nAL\nAL\nAlbania\n\n\n3\nAG\nDZ\nAlgeria\n\n\n4\nAQ\nAS\nAmerican Samoa\n\n\n\n\n\n\n\n\nstations_df.head()\n\n\n\n\n\n\n\n\nID\nLATITUDE\nLONGITUDE\nSTNELEV\nNAME\n\n\n\n\n0\nACW00011604\n57.7667\n11.8667\n18.0\nSAVE\n\n\n1\nAE000041196\n25.3330\n55.5170\n34.0\nSHARJAH_INTER_AIRP\n\n\n2\nAEM00041184\n25.6170\n55.9330\n31.0\nRAS_AL_KHAIMAH_INTE\n\n\n3\nAEM00041194\n25.2550\n55.3640\n10.4\nDUBAI_INTL\n\n\n4\nAEM00041216\n24.4300\n54.4700\n3.0\nABU_DHABI_BATEEN_AIR\n\n\n\n\n\n\n\nGreat! We are finally ready to add tables to our database. We will add three tables, one for temperatures, one for stations, and one for countries.\nFirst, let’s create a function to clean up the temperatures dataframe a bit.\n\ndef prepare_df(df):\n    df = df.set_index(keys=[\"ID\", \"Year\"])\n    df = df.stack()\n    df = df.reset_index()\n    df = df.rename(columns = {\"level_2\"  : \"Month\" , 0 : \"Temp\"})\n    df[\"Month\"] = df[\"Month\"].str[5:].astype(int)\n    df[\"Temp\"]  = df[\"Temp\"] / 100\n    return(df)\n\nNow let’s add the temperatures dataframe to our SQL database as a table by working with only 100,000 rows at a time. We are able to do this thanks to the iterator we created.\n\nfor i, df in enumerate(temps_df_iter):\n    df = prepare_df(df)\n    df.to_sql(\"temperatures\", conn, if_exists = \"replace\" if i == 0 else \"append\", index = False)\n\nNow, let’s add the other two dataframes as tables to our database.\n\nstations_df.to_sql(\"stations\", conn, if_exists = \"replace\", index=False)\ncountries_df.to_sql(\"countries\", conn, if_exists = \"replace\", index=False)\n\n279\n\n\nLet’s make sure that everything was added to our database successfully. Running the following code will allow us to see what is currently in our database.\n\ncursor = conn.cursor()\ncursor.execute(\"SELECT sql FROM sqlite_master WHERE type='table';\")\n\nfor result in cursor.fetchall():\n    print(result[0])\n\nCREATE TABLE \"temperatures\" (\n\"ID\" TEXT,\n  \"Year\" INTEGER,\n  \"Month\" INTEGER,\n  \"Temp\" REAL\n)\nCREATE TABLE \"stations\" (\n\"ID\" TEXT,\n  \"LATITUDE\" REAL,\n  \"LONGITUDE\" REAL,\n  \"STNELEV\" REAL,\n  \"NAME\" TEXT\n)\nCREATE TABLE \"countries\" (\n\"FIPS 10-4\" TEXT,\n  \"ISO 3166\" TEXT,\n  \"Name\" TEXT\n)\n\n\nAwesome! We have three tables, one for temps, one for stations, and one for countries. Now, we are done with our database connection, so it is good practice to close it.\n\nconn.close()\n\n\n\nPart 2: Querying our first database\nLet’s now use our database to perform an SQL query that returns a pandas dataframe. The beauty of this is that we do not have to have the entire dataframe in our RAM. To do this, we will use the query_climate_database() function which I have already defined. Let’s see what it looks like below:\n\nfrom climate_database import query_climate_database\nimport inspect\nprint(inspect.getsource(query_climate_database))\n\ndef query_climate_database(db_file, country, year_begin, year_end, month): \n    \"\"\"\n    Function which performs SQL query based on country, year beginning, year end, and month. \n    \n    args: \n        db_file (str): string for database name \n        country (str): string for country \n        year_begin (int): year in XXXX format for which year you want to start from \n        year_end (int): year in XXXX format for which year you want to end from \n        month (int): integer value of the month you are trying to query \n    returns: \n        df (pandas.DataFrame): a dataframe with these selected values \n    \"\"\"\n    \n    conn = sqlite3.connect(db_file) \n    \n\n    query = f\"\"\"\n    SELECT \n        temperatures.Year, \n        temperatures.Month, \n        temperatures.Temp, \n        stations.NAME, \n        stations.LATITUDE, \n        stations.LONGITUDE, \n        countries.Name \n    FROM \n        temperatures\n    JOIN \n        stations ON temperatures.ID = stations.ID\n    JOIN \n        countries ON substr(temperatures.ID, 1, 2) = countries.[FIPS 10-4]\n    WHERE \n        countries.Name = '{country}'\n        AND temperatures.Year BETWEEN {year_begin} AND {year_end}\n        AND temperatures.Month = {month}\n    \"\"\"\n    \n    df = pd.read_sql_query(query, conn)\n    df = df.reindex(columns=['NAME', 'LATITUDE', 'LONGITUDE', 'Name', 'Year', 'Month', 'Temp'])\n    df.columns = ['NAME', 'LATITUDE', 'LONGITUDE', 'Country', 'Year', 'Month', 'Temp']\n    \n    conn.close()\n    \n    return df \n\n\n\nSo this function takes 5 arguments 1. Database name 2. Country name 3. Beginning year 4. Ending year 5. Month number\nLet’s test it out with the code below:\n\nquery_climate_database(db_file = \"database.db\",\n                       country = \"India\", \n                       year_begin = 1980, \n                       year_end = 2020,\n                       month = 1)\n\n\n\n\n\n\n\n\nNAME\nLATITUDE\nLONGITUDE\nCountry\nYear\nMonth\nTemp\n\n\n\n\n0\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1980\n1\n23.48\n\n\n1\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1981\n1\n24.57\n\n\n2\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1982\n1\n24.19\n\n\n3\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1983\n1\n23.51\n\n\n4\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1984\n1\n24.81\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3147\nDARJEELING\n27.050\n88.270\nIndia\n1983\n1\n5.10\n\n\n3148\nDARJEELING\n27.050\n88.270\nIndia\n1986\n1\n6.90\n\n\n3149\nDARJEELING\n27.050\n88.270\nIndia\n1994\n1\n8.10\n\n\n3150\nDARJEELING\n27.050\n88.270\nIndia\n1995\n1\n5.60\n\n\n3151\nDARJEELING\n27.050\n88.270\nIndia\n1997\n1\n5.70\n\n\n\n\n3152 rows × 7 columns\n\n\n\n\n\nPart 3: Geographic scatterplots\nNow, let’s use SQL querying to create some geographic scatterplots with the NOAA data. First, let’s take a look at the function which will plot this figure for us:\n\nfrom climate_database import temperature_coefficient_plot\nprint(inspect.getsource(temperature_coefficient_plot))\n\ndef temperature_coefficient_plot(db_file, country, year_begin, year_end, month, min_obs, **kwargs):\n    \"\"\"\n     Function which creates a geographic scatterplot to see how yearly temperature increase vary across different locations (stations) for a given timeframe for a certain country. \n    \n    args: \n        db_file (str): string for database name \n        country (str): string for country to be plotted \n        year_begin (int): year in XXXX format for which year you want to start from \n        year_end (int): year in XXXX format for which year you want to end from\n        month (int): integer value of the month you are trying to query\n        min_obs (int): the minimum observations per data point plotted \n        **kwargs: arbitrary keyword arguments for the plot \n        \n    returns: \n        fig (plotly.express.scatter_mapbox): A geographic scatterplot with yearly temperature increase at different stations.\n    \"\"\"\n    # Query the climate database\n    df = query_climate_database(db_file, country, year_begin, year_end, month)\n    # use transform function here to filter out the stations that don't have at least min_obs years worth of data \n    \n    # Group by station and calculate the yearly change in temperature\n    df = df[df.groupby('NAME')['Year'].transform('count') &gt;= min_obs] \n    \n    coefs = df.groupby('NAME').apply(coef).reset_index()\n    coefs.columns = ['NAME', 'YearlyChange']\n    \n    df = pd.merge(df, coefs, on='NAME')\n    \n    #df['YearlyChange'] = df['YearlyChange'].round(4)\n    \n    # Create the scatterplot\n    fig = px.scatter_mapbox(df, lat='LATITUDE', lon='LONGITUDE', color='YearlyChange',\n                            color_continuous_midpoint=0, # centers the colorbar at 0 \n                            hover_data={'NAME': True, 'YearlyChange': ':.3f'}, # shows 3 digits after the decimal point \n                            labels={'YearlyChange': 'Estimated Yearly Increase (°C)'}, \n                            title=f\"Estimates of yearly increase in temperature in {pd.to_datetime(month, format='%m').month_name()} for stations in {country}, years {year_begin}-{year_end}\",  \n                            **kwargs)\n    \n    return fig\n\n\n\nAs we can see, the temperature_coefficient_plot function takes in 6 or more arguments: 1. database name 2. country name 3. beginning year 4. end year 5. month number 6. minimum observations in data point 7. additional keyword arguments for graph\nIt uses the first 5 arguments as input in the query_climate_database we tested earlier. Using this information, let’s create a geographic scatterplot of the yearly increase in temperature in January for India from 1980 to 2020.\n\nimport plotly.express as px\n\ncolor_map = px.colors.diverging.RdGy_r # choose a colormap\n\nfig = temperature_coefficient_plot(\"database.db\", \"India\", 1980, 2020, 1, \n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map)\n\nfig.show()\n\n\n\n\nInteresting! The estimated yearly increase actually appears to be decreasing near the Northeast region next to the Himalayas. I guess that makes sense, seeing how cold those mountains are. Let’s use the same function to see how this compares to Russia.\n\ncolor_map = px.colors.diverging.RdGy_r # choose a colormap\n\nfig = temperature_coefficient_plot(\"database.db\", \"Russia\", 1980, 2020, 1, \n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map)\n\nfig.show()\n\n\n\n\nCool! Russia’s temperatures appear to be decreasing in the same time period in several places as well.\n\n\nPart 4: Other types of Interactive Plots\nLet’s create a new query function that does not depend on the month. We can use this to create other kinds of interactive plots with plotly, that will answer two important questions:\nQuestion 1: How does the average yearly change in temperature vary based on elevation in a given country for a given timeframe?\nQuestion 2: How does the month impact the yearly increase in temperature for certain years in a given country?\nLet’s get started. First, let’s take a look at what the new query function looks like:\n\nfrom climate_database import query_climate_database_2\nprint(inspect.getsource(query_climate_database_2))\n\ndef query_climate_database_2(db_file, country, year_begin, year_end): \n    \"\"\"\n    Function which performs SQL query based on country, year beginning, and year end. \n    \n    args: \n        db_file (str): string for database name \n        country (str): string for country \n        year_begin (int): year in XXXX format for which year you want to start from \n        year_end (int): year in XXXX format for which year you want to end from \n    returns: \n        df (pandas.DataFrame): a dataframe with these selected values \n    \"\"\"\n    conn = sqlite3.connect(db_file) \n    \n    query = f\"\"\"\n    SELECT \n        temperatures.Year, \n        temperatures.Month,  \n        temperatures.Temp, \n        stations.NAME, \n        stations.LATITUDE, \n        stations.LONGITUDE, \n        stations.STNELEV,\n        countries.Name\n    FROM \n        temperatures \n    JOIN \n        stations ON temperatures.ID = stations.ID\n    JOIN \n        countries ON substr(temperatures.ID, 1, 2) = countries.[FIPS 10-4]\n    WHERE \n        countries.Name = '{country}'\n        AND temperatures.Year BETWEEN {year_begin} AND {year_end}\n    \"\"\"\n    df = pd.read_sql_query(query, conn) \n    conn.close() \n    return df\n\n\n\nAs we can see, this query function is the same as the previous one except it does not take in month. We can use this query function to create pandas dataframes that are more generalized, and then create plots to let us see more longterm trends. Let’s start with question 1, which is simple to plot but interesting to know.\n\nQuestion 1: How does the average yearly change in temperature vary based on elevation in a given country for a given timeframe?\nTo answer this question, we will use the elevation_coefficient_plot() function. Let’s inspect this function to see what it looks like:\n\nfrom climate_database import elevation_coefficient_plot\nprint(inspect.getsource(elevation_coefficient_plot))\n\ndef elevation_coefficient_plot(db_file, country, year_begin, year_end, **kwargs): \n    \"\"\"\n     Function which creates an interactive plot for elevation vs. yearly increase in temperature for a given timeframe for a certain country. \n    \n    args: \n        db_file (str): string for database name \n        country (str): string for country to be plotted \n        year_begin (int): year in XXXX format for which year you want to start from \n        year_end (int): year in XXXX format for which year you want to end from\n        **kwargs: arbitrary keyword arguments for the plot \n        \n    returns: \n        fig (plotly.express.scatter): A scatter plot of elevation on the x-variable and yearly change on the y-variable.  \n    \"\"\"\n    \n    df = query_climate_database_2(db_file, country, year_begin, year_end)\n    \n    coefs = df.groupby('NAME').apply(coef).reset_index()\n    coefs.columns = ['NAME', 'YearlyChange']\n    \n    df = pd.merge(df, coefs, on='NAME')\n    \n    fig = px.scatter(df, x='STNELEV',\n                     y='YearlyChange',\n                     hover_data={'NAME': True, 'LATITUDE': ':.3f', 'LONGITUDE': ':.3f', 'YearlyChange': ':.3f'},\n                     labels={'STNELEV': 'Station Elevation (meters)', 'YearlyChange': 'Yearly Temperature Change (°C)'},\n                     title=f'Correlation between Elevation and Yearly Increase in Temperature in {country} for the years {year_begin}-{year_end}', \n                     **kwargs)\n    return fig \n\n\n\nAs we can see, this function takes in the same 4 arguments as query_climate_database_2, except with room for one more optional argument for additional keyword arguments. The way this function works is: 1. It first performs the query_climate_database_2 function to obtain the necessary data. 2. Then, it creates a dataframe for this data. 3. Finally, creates an interactive plotly scatterplot that allows us to see the correlation between elevation and average yearly change in temperature.\nLet’s see if we can find any patterns for India from 1980 to 2020.\n\nfig = elevation_coefficient_plot(\"database.db\", \"India\", 1980, 2020)\nfig.show()\n\n\n\n\nWow! As we can see, each value is nicely rounded, and we can hover over each datapoint to learn more about it, such as the station name, the exact yearly temperature change, and more. However, there does not appear to be much correlation at all. So, to answer our question:\nIn India from 1980-2020, the average yearly change in temperature does not depend on elevation.\nBut, we can always make more scatterplots to see if there is any correlation in other countries!\nHowever, while it is informative, this type of plot is not extremely exciting. Let’s create another plot that has more facets. We now want to answer the question:\n\n\nQuestion 2: How does the month impact the yearly increase in temperature for certain years in a given country?\nTo do this, we will use the same query_climate_database_2 function, but this time, use the temperature_increase_boxplot function to graph it. Let’s, once again, take a look at what this function looks like.\n\nfrom climate_database import temperature_increase_boxplot\nprint(inspect.getsource(temperature_increase_boxplot))\n\ndef temperature_increase_boxplot(db_file, country, year_begin, year_end, **kwargs): \n    \"\"\"\n     Function which creates an interactive boxplot to see how yearly temperature increase varies across the months, for a given timeframe for a certain country. \n    \n    args: \n        db_file (str): string for database name \n        country (str): string for country to be plotted \n        year_begin (int): year in XXXX format for which year you want to start from \n        year_end (int): year in XXXX format for which year you want to end from\n        **kwargs: arbitrary keyword arguments for the plot \n        \n    returns: \n        fig (plotly.express.box): A boxplot of yearly temperature increase over the months.\n    \"\"\"\n    df = query_climate_database_2(db_file, country, year_begin, year_end)\n\n    \n    coefs = df.groupby(['NAME', 'Month']).apply(coef).reset_index()\n    coefs.columns = ['NAME', 'Month', 'YearlyChange']\n    \n    df = pd.merge(df, coefs, on=['NAME', 'Month'])\n    df['Month'] = pd.to_datetime(df['Month'], format='%m').dt.month_name()\n    df['YearlyChange'] = df['YearlyChange'].round(3)\n    \n    # Create the boxplot\n    fig = px.box(df, x='Month', y='YearlyChange',\n                 color = 'Month',\n                 labels={'Month': 'Month', 'YearlyChange': 'Yearly Temperature Change (°C)'},\n                 title=f'Month-by-Month Statistics of Yearly Increase in Temperature in {country} from {year_begin}-{year_end}',\n                 hover_data={'YearlyChange': ':.3f'},\n                 **kwargs)\n    \n    return fig\n\n\n\ntemperature_increase_boxplot takes in the same arguments as elevation_coefficient_plot, except this time, it makes a box plot based on every month of the year. Let’s see this in action.\n\nfig = temperature_increase_boxplot(\"database.db\", \"India\", 1980, 2020)\n\nfig.show()\n\n\n\n\nWow, what an informative plot! The axes are nicely labelled, and, if we look closely, we can see a monthly pattern in yearly increase in temperature. It appears to be going in a slight wave up and down. However, the data points do have a lot of outliers.\n\n\n\nPart 5: Summary and takeaways\nToday, we learned how to use SQL querying to create pandas dataframes and create interactive plotly plots. SQL can open up many doors because we are not limited by our computer’s RAM. I hope you learned something from this post, and have a fantastic day!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "Using SQL in Plots\n\n\n\n\n\n\nweek 3\n\n\nhomework1\n\n\n\n\n\n\n\n\n\nJan 26, 2024\n\n\nAnika Misra\n\n\n\n\n\n\n\n\n\n\n\n\nHW0\n\n\n\n\n\n\nweek 2\n\n\nhomework0\n\n\n\n\n\n\n\n\n\nJan 21, 2024\n\n\nAnika Misra\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nart\n\n\n\n\n\n\n\n\n\nJan 20, 2024\n\n\nAnika Misra\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 16, 2024\n\n\nAnika Misra\n\n\n\n\n\n\nNo matching items"
  }
]